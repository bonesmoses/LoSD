#!/system/bin/sh

### BEGIN DAEMON INFO
# Provides:          LoSD
# Short-Description: Monitors and repairs unresponsive phone CDMA radio
# Long-Description:  Some phones have flakey CDMA radios. As such, they will
#                    be unable to stay connected to the carrier's towers. This
#                    daemon will detect these occurrences and attempt to
#                    repair them.
# Version:           0.9.0
# Date:              2011-12-05
### END DAEMON INFO

# Change these in /data/local/LoSD/LoSD.ini
################################################################################

if [ -f /data/local/LoSD/LoSD.ini ]; then
  . /data/local/LoSD/LoSD.ini
fi

DEBUG=${DEBUG:-1}                       # Debug messages in logs? 0/1.
DUMPLOGS=${DUMPLOGS:-0}                 # Should we dump logs during fix?
LOGPATH=${LOGPATH:-/data/local/LoSD}    # Directory where logs should be saved
RESTARTS=${RESTARTS:-2}                 # RILD restart attempts before reboot
RESTART_LIMIT=${RESTART_LIMIT:-3}       # RILD restarts before required reboot
SLEEP=${SLEEP:-120}                     # Seconds between LoS checks

# Don't edit below this line!
################################################################################

# Function Definitions

###
 # Dump system logs to a path readable by a regular user.
 #
 # When the script encounters an error, logs are sent to a directory
 # configured at the top of the script. These logs will help determine the
 # cause of the LoS and possibly aid in revising the detection process.
 #
 # Logs are stored in a directory named after a timestamp of the full
 # year, date, and time of the LoS, in YYYY-MM-DD_HH:MM:SS format. It is
 # safe to read or remove these logs as the user decides.
##
dump_logs()
{
  # Always have a path to log to. The user can configure it, so it's our job
  # to make sure it's there.

  if [ ! -d $LOGPATH ]; then
    busybox mkdir -p $LOGPATH
  fi

  mkdir $LOGPATH/temp

  dmesg > $LOGPATH/temp/dmesg.log
  bugreport > $LOGPATH/temp/bugreport.log
  dumpsys connectivity > $LOGPATH/temp/connectivity.log
  logcat -b radio -v time -d > $LOGPATH/temp/radio.log

  mv $LOGPATH/temp $LOGPATH/$(date +"%Y-%m-%d_%H:%M:%S")

  # Clear the radio log so we stop re-detecting repaired LoS events.

  logcat -b radio -c
}

###
 # Record LoS events in the LoSD log file. Wrapper for system logging.
 #
 # The LoSD log file is located in the LOGPATH directory named LoSD.log, and
 # will persist across reboots. Unlike the system log, we want to keep a
 # running total of los events, in case the user set DUMPLOGS to false. This
 # log is much smaller, and ideally should be much smaller than a few kb.
 #
 # Each entry in the log gets a time and date stamp.
 #
 # @param String   Message to log.
 # @param String   Type of message: i=info, w=warning, e=error. Default: i.
##
log_los()
{
  sMessage=$1
  sLogType='Info'

  if [ "$2" == 'w' ]; then
    sLogType='Warning'
  elif [ "$2" == 'e' ]; then
    sLogType='Error'
  fi

  if [ "$sLogType" != 'Info' ] || [ $DEBUG -gt 0 ]; then
    echo "$(date +'%Y-%m-%d %H:%M:%S') : $sLogType : $sMessage" >> \
         $LOGPATH/LoSD.log
    log -p $sLogType -t LoSD "$sMessage"
  fi
}

###
 # Repair the RILD radio daemon, or restart the phone.
 #
 # In order to repair the radio, we must either restart the RILD radio daemon
 # or restart the phone if that fails. Before doing so, we must check to see
 # if the user is on an active call, or in airplane mode---both of which
 # suggest either a false positive, or an intentionally disconnected state.
 # No matter which solution we choose, we must trigger a log dump for forensic
 # purposes.
 #
 # @param sType  String describing type of LoS being repaired.
 #     Should be 'ghost' or 'full'.
##
fix_los()
{
  sType=$1

  # First and foremost, do not touch the radio during an active phone call.

  if [ $(dumpsys telephony.registry | grep -c mCallState=0) -lt 1 ]; then
    log_los "Active phone call, skipping restart."
    if [ "${sType}" == "ghost" ]; then
      logcat -b radio -c # Radio log was false positive. Clear.
    fi
    return
  fi

  # Next, make sure we're not in airplane mode. We should never reboot
  # in that case, because the LoS is intentional.

  if [ $(dumpsys location | grep -c 'AirplaneMode 1') -gt 0 ]; then
    log_los "Airplane mode detected, skipping restart."
    return
  fi

  log_los "Confirmed ${sType} LoS." w

  # If we've exceeded the RILD restart limit, the system is probably too
  # unstable, so we should reboot instead.

  if [ $RILD_COUNT -eq $RESTART_LIMIT ]; then
    log_los "RILD restart count exceeded. Proceeding directly to reboot." w
    RESTARTS=0 # Set to 0 to skip the radio restart loop.
  fi

  # Now, try to restart the radio daemon. In some cases, this can fix LoS. Then
  # wait 10 seconds. We do this as many times as requested, in case we merely
  # promoted a ghost LoS to a full LoS. If the radio has not yet restarted,
  # or the service is still lost, continue to the reboot step.

  for nTry in $(seq 1 1 ${RESTARTS}); do

    log_los "Attempt #${nTry} to restart radio daemon..." w

    # Stop the radio nicely with setprop. If the radio is truly hosed, only
    # a system kill will work, which may cause side effects.

    setprop ctl.stop ril-daemon
    sleep 5

    if [ $(pgrep rild | wc -l) -gt 0 ]; then
      log_los "RILD not responding to stop command." e
      log_los "Attempting to kill RILD." w
      killall rild
    else
      setprop ctl.start ril-daemon
    fi

    sleep 10

    # No matter what kind of LoS, the radio should now be available. In some
    # cases of ghost LoS, restarting the radio will put it into full LoS.
    # Either way, if the radio still isn't available, it's reboot time!

    bRadio=$(dumpsys connectivity | grep "mobile\[" | grep -c "able: true")
    if [ $bRadio -eq 1 ]; then
      RILD_COUNT=$(( $RILD_COUNT + 1 ))
      log_los "RILD restart successful."
      if [ $DUMPLOGS -eq 1 ]; then
        dump_logs
      fi
      return
    fi
  done # End RILD restart loop

  # :(

  log_los "RILD restart failed. Rebooting." e
  if [ $DUMPLOGS -eq 1 ]; then
    dump_logs
  fi
  reboot
}

# As a special case, if we get called with 'dump' as an option, we should 
# output all known logs as if we encountered a LoS, and exit.

if [ "$1" == "dump" ]; then
  log_los "User manually dumped logs."
  echo -n "Dumping logs... "
  dump_logs
  echo "Done!"

  sDump=$(find $LOGPATH -type d -mindepth 1 | sort -rn | head -n 1)
  tar -czf $LOGPATH/logs.tar.gz -C $LOGPATH ${sDump##*/}

  echo "Please check ${sDump} for logs."
  echo "Or, send $LOGPATH/logs.tar.gz to Trifthen."
  exit
fi

# Check to make sure we're not already running. No more than one daemon at
# a time, people!

if [ "$(pidof LoSD)" != "$$" ]; then
  echo "LoSD is already running!"
  echo "Did you mean to call 'LoSD dump' for logs?"
  exit
fi

# Program Body

log_los "LoSD Starting"

RILD_COUNT=0

# Enter the main program loop. We sleep first so we can abort after each
# check and immediately wait for the next iteration of checks.

while : ; do

  sleep $SLEEP

  # Grab connectivity status from the system. We can use this string for
  # several checks.

  sConnStatus=$(dumpsys connectivity | grep "mobile\[")

  # The radio might be in a CONNECTING state. That means it's changing towers
  # or trying to roam. Any errors we receive during this are likely false
  # positives. In true LoS or ghost LoS, the state is (dis)connected.

  if [ "${sConnStatus#*CONNECTING}" != "$sConnStatus" ]; then
    log_los "Currently between towers. No LoS."
    continue
  fi

  # "isAvailable: true" is the first check. No matter the state of any other
  # radio, the CDMA radio should *always* be available. If this is false,
  # there's no need to check for ghost LoS.

  if [ "${sConnStatus#*isAvailable: false}" != "$sConnStatus" ]; then
    log_los "Confirmed radio unavailable."
    fix_los full
    continue
  fi

  # In some cases of ghost LoS, the radio gets confused and doesn't know its
  # own state. We check this first because it's independant of the perceived
  # radio status.

  if [ "${sConnStatus#*UNKNOWN/UNKNOWN}" != "$sConnStatus" ]; then
    log_los "Detected ghost LoS."
    fix_los ghost
    continue
  fi

  # In other cases of ghost LoS, the RILClient goes wacko. We can check for
  # that by getting a logcat and looking for error state.

  if [ $(logcat -b radio -d -s RILClient:E | grep -c ': Error') -gt 1 ]; then
    log_los "Detected bad RIL Client - ghost LoS."
    fix_los ghost
    continue
  fi

  # In the same idea as the RILClient, sometimes RILJ just does crazy with
  # GENERIC_FAILURE messages. That's definitely not normal.

  if [ $(logcat -b radio -d -s RILJ:D | grep -c GENERIC_FAILURE) -gt 1 ]; then
    log_los "Detected bad RILJ daemon - ghost LoS."
    fix_los ghost
    continue
  fi

  # If we got this far, the radio has no *known* defects. Say so and restart
  # the loop.

  log_los "Radio appears normal - no LoS."

done

